# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15pLa1B8dqDP_Mj2nllTi6VWFbrwZ9n4W
"""

code = """
import random
import json
import os

# File to store scores & history
DATA_FILE = "rps_game_data.json"

# Game rules: who beats who
beats = {"rock": "scissors", "scissors": "paper", "paper": "rock"}
choices = list(beats.keys())

# Load previous scores/history
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {"player_score": 0, "computer_score": 0, "player_history": {"rock": 0, "paper": 0, "scissors": 0}}

# Save scores/history
def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# Predictive AI: Chooses the counter to player's most common choice
def adaptive_ai_choice(player_history):
    if sum(player_history.values()) == 0:
        return random.choice(choices)
    most_common = max(player_history, key=player_history.get)
    counter = [move for move, beaten in beats.items() if beaten == most_common][0]
    if random.random() < 0.3:  # Add randomness
        return random.choice(choices)
    return counter

# Main game
def play():
    data = load_data()
    player_score = data["player_score"]
    computer_score = data["computer_score"]
    player_history = data["player_history"]

    print("\nüéÆ Adaptive Rock-Paper-Scissors üéÆ")
    print("Enter: r (rock), p (paper), s (scissors), e (exit)\n")

    while True:
        # Get player move
        player = input("Your move: ").lower()
        if player == "e":
            break
        if player in ["r", "p", "s"]:
            player = {"r": "rock", "p": "paper", "s": "scissors"}[player]
        else:
            print("‚ùå Invalid choice! Try again.")
            continue

        # AI move
        computer = adaptive_ai_choice(player_history)
        print(f"Computer chose: {computer}")

        # Update history
        player_history[player] += 1

        # Decide winner
        if player == computer:
            print("ü§ù It's a tie!")
        elif beats[player] == computer:
            print("‚úÖ You win!")
            player_score += 1
        else:
            print("üíª Computer wins!")
            computer_score += 1

        print(f"Score -> You: {player_score} | Computer: {computer_score}\n")

    # Save updated data
    data["player_score"] = player_score
    data["computer_score"] = computer_score
    data["player_history"] = player_history
    save_data(data)
    print("üìÅ Game data saved. See you next time!")

if __name__ == "__main__":
    try:
        play()
    except KeyboardInterrupt:
        print("\n‚è∏ Game exited by user.")
"""

with open("adaptive_rps.py", "w") as f:
    f.write(code)

